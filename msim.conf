#
# Kalisto
#
# Copyright (c) 2001-2015
#   Department of Distributed and Dependable Systems
#   Faculty of Mathematics and Physics
#   Charles University, Czech Republic
#
# MSIM configuration script
#


# Most of the configuration file consists of adding devices to the simulator.
#
# Syntax: add <device type> <device name> [device options]


# Add a processor device.
#
# At least one processor device is necessary for the simulator to have
# something to simulate :-).
#
# Important note: Currently the SMP support is very crude, it does not
# do anything useful and it is slowing down the pace of MSIM. Do not
# enable the extra processors unless you plan to implement full-fledged
# SMP support.

add dcpu cpu0
# add dcpu cpu1
# add dcpu cpu2
# add dcpu cpu3


# Memory devices are added next.
#
# Syntax: add rwm <name> <starting physical address>
#         add rom <name> <starting physical address>
#         <name> generic <size in bytes>
#
# A memory device can be initialized with content stored in a file.
#
# Syntax: <name> load <file>


# Add the main memory block.
#
# The main memory block contains the exception vectors, the temporary stack,
# the kernel code, and, after its end, the kernel heap. Although the physical
# address of the main memory block is 0, the virtual address will contain the
# identification of the KSEG0 segment in its highest bits:
#
# 0x80000000    +---------------------------------------------------------+
#               | Handler for TLB Refill Exception.                       |
#               | Its address is hardwired in the processor.              |
#               | Maps to physical address 0x00000000.                    |
# 0x80000080    +---------------------------------------------------------+
#               | Handler for XTLB Refill Exception (not in MSIM).        |
#               | Its address is hardwired in the processor.              |
#               | Maps to physical address 0x00000080.                    |
# 0x80000100    +---------------------------------------------------------+
#               | Handler for Cache Error Exception.                      |
#               | Its address is hardwired in the processor.              |
#               | Maps to physical address 0x00000100.                    |
# 0x80000180    +---------------------------------------------------------+
#               | Handler for other exceptions.                           |
#               | Its address is hardwired in the processor.              |
#               | Maps to physical address 0x00000180.                    |
# 0x80000200    +---------------------------------------------------------+
#               | Temporary stack and variables used by the bootstrap     |
#               | code. The address has been selected beacuse it is       |
#               | easy to use as a constant, there is nothing             |
#               | special to it otherwise.                                |
#               |                                                         |
#               | Note that because stack grows downwards, the stack      |
#               | pointer is initialized to point at the end, rather      |
#               | than the beginning, of this area.                       |
#               |                                                         |
#               | The size of the area is a result of a guess about how   |
#               | much data will be on the stack during interrupt and     |
#               | exception processing, plus some reserve.                |
#               |                                                         |
#               | Maps to physical address 0x00000200.                    |
# 0x80000400    +---------------------------------------------------------+
#               | Entry point of the kernel.                              |
#               | This is where the bootstrap code jumps to.              |
#               | Maps to physical address 0x00000400.                    |
# kernel_end    +---------------------------------------------------------+
#               | End of the kernel image.                                |
#               | The space for the kernel heap begins here.              |
#               |                                                         |
#               | Since we do not know how long the kernel image is, the  |
#               | kernel_end symbol is set by the linker in the linker    |
#               | script.                                                 |
#               +---------------------------------------------------------+
#
# The size of the main memory block is a result of a guess about how long
# the kernel image is and how much kernel heap will be needed. Be sure to
# extend it as your kernel grows.

add rwm mainmem 0
mainmem generic 1M
mainmem load "kernel/kernel.bin"

# Add the bootstrap memory block.
#
# The processor is hardwired to begin executing at the address 0xBFC00000,
# which maps to physical address 0x1FC00000. This is where a memory block
# with the bootstrap code resides.

add rom startmem 0x1FC00000
startmem generic 4K
startmem load "kernel/loader.bin"

# Add the user space process memory block.
#
# The image of the user space process is stored at the physical address
# 0x1FB00000 where it could be read by the kernel.

add rom process 0x1FB00000
process generic 128K
process load "user/process.bin"


# Display devices are added next.
#
# Syntax: add dprinter <name> <address>
#
# The address is that of a register used to write the display output.


# Add a single display device.
#
# The address of the display device is picked so as not to collide with
# other devices mapped in the physical address space. Be sure to move
# the device elsewhere if the main memory block grows beyond it.

add dprinter printer 0x10000000


# Add dkeyboard device.
#
# This is a character device providing input characters that are mapped
# to keypresses. The device sends interrupt 4 to notify on a keypress.
# Again be sure to move the device elsewhere if the main memory block
# grows beyond it.

add dkeyboard keyboard 0x10000008 4


# Add dorder device.
#
# This device is used to identify the CPU we are currenty running on
# and to send interprocessor interrupts (interrupt 6) between them.
# Again be sure to move the device elsewhere if the main memory
# block grows beyond it.

add dorder order 0x10000010 6


# Add ddisk device.
#
# This is a block device providing DMA access to the disk image stored
# in the file ddisk.img. The device sends interrupt 5 to notify on
# completed operations and state changes. Again be sure to move
# the device elsewhere if the main memory block grows beyond it.

add ddisk disk 0x10000018 5
disk fmap "ddisk.img"
